{"version":3,"sources":["node_modules/shortid/lib/random/random-from-seed.js","node_modules/shortid/lib/alphabet.js","node_modules/shortid/lib/random/random-byte-browser.js","node_modules/nanoid/format.js","node_modules/shortid/lib/generate.js","node_modules/shortid/lib/build.js","node_modules/shortid/lib/is-valid.js","node_modules/shortid/lib/util/cluster-worker-id-browser.js","node_modules/shortid/lib/index.js","node_modules/shortid/index.js","utils/html-templates.js","utils/constructors.js","utils/utils.js","main.js"],"names":["primaryColorMap","yellow","orange","red","magenta","violet","blue","cyan","green","htmlSnippets","taskTemplate","taskTitle","taskDeleteButton","taskEditButton","taskUpdateButton","taskAddButton","taskEditSearchBar","shortid","require","style","Task","title","uuid","generate","List","name","color","tasks","colorNames","Object","keys","randomColorIndex","Math","floor","length","random","primaryColorList","addTask","add","deleteTask","taskIndex","findTaskByUuid","console","log","deletedContent","splice","index","error","i","appendTask","list","task","append","$","on","removedStuff","replaceWith","e","keyCode","val","remove","editTask","selector","html","structure","utils","ready","testTask","initializePage","createdTask","listenForMenuButton","click","toggleClass"],"mappings":"AaAA,AVAA,AMAA,ARAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AOAA,AIAA,ADAA,AEAA;ATCA,AMAA,ARAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AOAA,AGCA;AGAA,AVAA,AMAA,ARAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AOAA,IMAMgE,SAAS,GAAG9C,OAAO,CAAC,yBAAD,CAAzB;AVCA,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AOAA;AMAA,AVCA,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,IaDMC,KAAK,GAAGD,OAAO,CAAC,2BAAD,CAArB;AVEA,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA;AaDA,AVEA,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,IaFM+C,KAAK,GAAG/C,OAAO,CAAC,kBAAD,CAArB;AVGA,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AWLA,ADCO,AEDP,IDAMD,ADCOjB,AEDPmB,KAAK,EDAE,CCACD,EDAEA,KDCY,AEDP,CAAC,CDAC,CAAC,ADCO,SCDR,CAAvB,SCAqB,CAArB;ACIAmC,AVEA,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AUJEpD,CGED,CAAC,AHFAA,MAAM,EAAE,EGET,CAAD,CAAciE,KAAd,AHH+B,CGGX,YAAY;AAC9B,AVEF,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AWNA,ADEEhE,AEDK,EFCLA,ECFIiB,ACCO8B,ECGPkB,EHFE,CCFG,CDED,ECFIjD,EEIA,ADHS,GCGN,ADHS,EDDL,ADAU,CCAT,CEID8C,KDHRf,ICGiB,CAAC7B,IAAd,CACb,ADJsB,CAAS8B,IDDd,ACCK,CDD1B,CCCyCC,IAAf,EAAqB,sBCG9B,EACwB;AACrC,AVCJ,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AWLA,ADCEhD,AEDA+C,EFCA/C,AEDA+C,GFCG,CEDC,CFCC,AEDAE,MAAL,GFF6B,8BGId,CAAf,GDFyCD,IAAI,CAAC7B,IAA9C;ACOA2C,AVDF,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AUJE7D,AEDAiD,ECMAY,AHLA7D,AEDAiD,CAAC,ICMI,CAACJ,CHLC,EAAE,IEDHE,GCMN,CAAiBE,ADNP,CCMQ,AHTW,AEGlB/B,CCMQ,GDNlB,EAAD,CAAmB8B,MCMD,ADNlB,CCMA,EAAkCe,QAAlC,0CDNqEhB,IAAI,CAAC9B,KAA1E,aAF6C,CAE6C;ACO1F+C,AVDF,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AUJE/D,AEDA,ECMA+D,AHLA/D,MAAM,EAAE,MGKM,EHVe;AGa9B,AVHD,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AUJEC,CGHF,CHGEA,IAAI,EAAE,SANuB;AGgB/B,AVLA,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AUJEC,AEDA8C,EFCA9C,AEDA8C,CAAC,GFCG,EAAE,OEDAF,EFNuB,EEMnB,CAAC7B,IAAV,EAAD,CAAmB8B,MAAnB,CAA0BjC,KAAK,CAACV,YAAN,CAAmBI,cAA7C,EAL6C,CAKiB;ATMhE,AFAA,AIAA,ADAA,AIAA,AFAA,AJAA,AFAA,AUJEL,EAAAA,KAAK,EAAE;APKT,AFAA,AIAA,ADAA,AIAA,ANAA,AFAA,AUb+B,AEQ7B6C,CFRK,CEQLA,CAAC,YAAKF,IAAI,CAAC7B,IAAV,EAAD,CAAmB8B,MAAnB,CAA0BjC,KAAK,CAACV,YAAN,CAAmBG,gBAA7C,EAP6C,CAOmB;ATMlE,AFAA,AIAA,ADAA,AIAA,ANAA,AFAA;AGCA,AFAA,AIAA,ADAA,AIAA,ANAA,AFAA,AUJO,AEDLyC,EAAAA,CAAC,CFCU5C,WEDL0C,CFCiB,GAAG,AEDhB,CAAC7B,IAAV,wBAAD,CAAqCgC,EAArC,CAAwC,OAAxC,EAAiD,YAAW;ACU9D,AVJA,AFAA,AIAA,ADAA,AIAA,ANAA,AFAA,AUJE5C,AEF8D,EFE9DA,OGQO0D,KHRK,SGQd,GAA0B,+BHTE;AGW1B,AVLF,AFAA,AIAA,ADAA,AIAA,ANAA,AFAA,AUAEzD,AENE,EFMFA,MENM4C,GFMG,SENS,GAAGF,CAAC,YAAKF,IAAI,CAAC7B,IAAV,kBAAD,CAA+BkC,WAA/B,CAA2CrC,KAAK,CAACV,KFA5C,OEAsC,CAAmBO,iBAA9D,CAAnB;ACYFqC,AVLF,AFAA,AIAA,ADAA,AIAA,ANAA,AFAA,AUIEzC,AEVIyC,ECWJA,AHDAzC,CGCC,CAAC,ADXEyC,CAAC,YAAKF,CFUM,GGCf,ADXa,CCWd,ADXe7B,CCWMgC,EAArB,CAAwB,ADXnB,OCWL,EAAiC,UAAUG,CAAV,EAAa,CDX1C,CAAoCH,EAApC,CAAuC,OAAvC,EAAgD,UAASG,CAAT,EAAY,2BFDtC;AGaxB,AVLJ,AFAA,AIAA,AGAA,ARAA,AUIE5C,AEVM6B,EFUN7B,IEVM6B,ECWAe,CAAC,CAACC,GDXK,CAACf,EFUA,CGCR,ADXA,CAAY,ICWE,EAAlB,EAAsB,QDXlB,8DFFoB;AGctB,AVLN,AFAA,AIAA,AGAA,ARAA,AWPO,ADWL7B,EAAAA,ECXWM,IAAI,EEYPC,CFZU,IEYL,GAAGgC,AHDA,CGCC,CAAC,AFZPjC,IAAO,CAAUC,KAAV,EAAiB,KEYlB,CAAD,CAAqBsC,GAArB,EAAZ,0CHdsB;AGetB,AVLN,AFAA,AIAA,AGAA,ARAA,AWPE,ADWA5C,AEXM,EFWNA,KCXKM,GEYGgD,ADZEZ,CAAC,CDAX,ACAYC,GDACrC,ADWA,IEXH,CDAV,CEYmB,GAAG,ADZE,EAAlB,ECYoB2C,ADZE,SCYO,CAAC5C,IAAd,CAAmBC,KAAnB,CAAlB,kBHfsB;AGiBtBgC,AVNN,AFAA,AIAA,AGAA,ARAA,AWPE,ADWArC,AEXQ0B,EFWR1B,IGEIqC,CAAC,AFbA/B,CEaC,ADbEoB,GDAR,GAAYzB,CCAG,CAAC0B,GFWC,AEXT,CAAY,CDAD,CAACpB,GEaf,CAAD,CAAqBoC,GAArB,AFbQ,CEaiB,CFb7B,CEaI,EAJoB,CAIU,CDb1B;ATQV,AFAA,AIAA,AGAA,AGPC,ADL2B,AEKlBR,CDHH,ADFA,OEKGA,IAAI,CAAC9B,KAAL,GAAagC,CAAC,YAAKF,IAAI,CAAC7B,IAAV,uBAAD,CAAoCqC,GAApC,EAAb;ACaJM,AVLN,AFAA,AIAA,AGAA,AGJA,ACHUZ,MCYJY,EDZIZ,CAAC,ECYA,CAACJ,SDZIE,CCYV,CAAiBE,CAAC,CAAC,ADZL,CAAC/B,IAAV,OCYa,CAAlB,EAAkC+C,WAAlC,EDZI,CAAoCb,WAApC,qDAA2FL,IAAI,CAAC9B,KAAhG;ACaL,AVLL,AFAA,AIAA,AGAA,AIPS;ACaN,AVLH,AFAA,AIAA,AGAA,AIPO,GCIL,EDXI;ACqBJgC,AVNF,AFAA,AIAA,AGAA,AIPG,ECaDA,CAAC,ADvBD,CCuBE,kBAAD,CAAD,CAAsBC,EAAtB,CAAyB,OAAzB,EAAkC,YAAY;AAC5C,AVNJ,AFAA,AIAA,AGAA,AINED,EAAAA,CAAC,KCYKhC,KAAK,EDZL8B,CCYQE,CAAC,CAAC,CDZN,CAAC/B,IAAV,WCYc,CAAD,CAAqBqC,GAArB,EAAZ,QDZF,CAAuCL,EAAvC,CAA0C,OAA1C,EAAmD,YAAW;ACa5D,AVNJ,AFAA,AIAA,AGAA,AIPkE,QCa1De,WAAW,GAAG,IAAIL,SAAS,CAAC5C,IAAd,CAAmBC,KAAnB,CAAlB;AAEAgC,AVPJ,AFAA,AIAA,AGAA,AIPIA,ICcAA,ADdAA,CCcC,ADdA,CCcC,WDdIF,IAAI,CAAC7B,CCcV,CAAD,CAAqBqC,CDdpB,ECcD,ADdA,CCcyB,ADdNC,ECcnB,EAJ4C,CAId,CDd9B;ATQJ,AFAA,AIAA,AGAA,AIPG,GAFD;ACgBEK,AVNJ,AFAA,AIAA,AGAA,AIPC,CAxBM,GCqCHA,KAAK,CAAChB,UAAN,CAAiBI,CAAC,CAAC,YAAD,CAAlB,EAAkCgB,WAAlC;AACD,AVNH,AFAA,AIAA,AGAA,GKAE;AAQAC,AVPF,AFAA,AIAA,AGAA,EKOEA,mBAAmB;AACpB,AVPD,AFAA,AIAA,AGAA,AGRO,IAAM9C,IAAI,GAAG,SAAPA,IAAO,CAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AEiB3C,AVRA,AFAA,AIAA,AGAA,AGRE,ACDK,IAAMmC,GDCNpC,IAAL,CCDmB,EDCPA,CCDU,GDCtB,MCDWoC,QAAW,CAASC,QAAT,EAAmBX,IAAnB,EAAyB;ATUjD,AFAA,AIAA,AGAA,AGRE,ACDAE,EAAAA,CAAC,IDCI/B,IAAL,GAAYL,CCDNkC,IAAI,CAAC7B,CDCQ,CAACC,ECDnB,EAAD,CAAmBwC,GDCP,CCDZ,CDCA,ACDwB5C,KAAK,CAACV,YAAN,CAAmBO,iBAA3C;ATUF,AFAA,AIAA,AGAA,AGRE,ACDD,CAFM,MDGAW,KAAL,GAAa,EAAb,CAHyC,CAKzC;AROF,AFAA,AIAA,AGAA;ALCA,AFAA,AIAA,AGAA,AGPE,MAAI,CAACD,KAAL,EAAY;AEcd,AVNA,AFAA,AIAA,AGAA,AGPI,QAAIE,CEaC0C,SFbS,GAAGzC,MAAM,CEa3B,AFb4BC,GEaG,CFbV,CAAYX,KAAK,CAACnB,eAAlB,CAAjB;AEcFqD,AVNF,AFAA,AIAA,AGAA,AGPItB,EEaFsB,CAAC,CAAC,AFbAtB,cEaD,CAAD,CAAkBwC,AFbA,GAAGvC,EEarB,CAAwB,CFbC,CAACC,KAAL,CAAWL,IEaG,MFbO,CAACM,MAAX,GAAoBF,IAAI,CAACG,MAAL,EAA/B,CAAnB;AEcAkB,AVNJ,AFAA,AIAA,AGAA,AGPI,IEaAA,CAAC,CAAC,GFbG3B,IEaJ,CAAD,AFbA,CEaW8C,EFZTrD,KAAK,CAACiB,GEYR,CAAuB,QAAvB,IFZE,CAAuBL,gBAAvB,CADF;AEcAsB,AVNJ,AFAA,AOAA,AGNG,GALD,CEiBEA,CAAC,CAAC,GFZG,OEYJ,CAAD,CAAcmB,WAAd,CAA0B,QAA1B;AACD,AVNH,AFAA,AOAA,AGNI,GESF,MFTO9C,KAAL,GAAaA,KAAb;AEcF2B,AVPF,AFAA,AOAA,AGNG,EEaDA,CAAC,CAAC,oBAAD,CAAD,CAAwBkB,KAAxB,CAA8B,YAAW;AACvClB,AVPJ,AFAA,AOAA,IKOIA,CAAC,CAAC,OAAD,CAAD,CAAWmB,WAAX,CAAuB,QAAvB;AACAnB,AVPJ,AFAA,AOAA,AGNE,IEaEA,CAAC,CAAC,CFbChB,OAAL,EEaG,CAAD,AFba,CEaCmC,WAAd,AFbwB,CEaE,QAA1B;AACD,AZPH,AOAA,AGNI,GEUF,MFVO7C,KAAL,CAAWW,GAAX,CAAe,IAAIlB,IAAJ,EAAf;AEcH,AZPD,AOAA,AGNG,GAFD;AVSF,AOAA;APCA,AOAA,AGNE,OAAKmB,UAAL,GAAkB,UAASjB,IAAT,EAAe;AVOnC,AOAA,AGNI,QAAIkB,SAAS,GAAG,KAAKC,cAAL,CAAoBnB,IAApB,CAAhB,CAD+B,CAG/B;AVKJ,AOAA;APCA,AOAA,AGLI,QAAIkB,SAAJ,EAAe;AVMnB,AOAA,AGLME,MAAAA,OAAO,CAACC,GAAR;AVMN,AOAA,AGLM,UAAIC,cAAc,GAAG,KAAKjB,KAAL,CAAWkB,MAAX,CAAkBC,KAAlB,EAAyB,CAAzB,CAArB,CAFa,CAIb;AVIN,AOAA;APCA,AOAA,AGJM,UAAIF,cAAJ,EAAoB;AVK1B,AUJQF,QAAAA,OAAO,CAACK,KAAR,CAAc,kCAA2B,KAAKtB,IAAhC,8BACDH,IADC,CAAd;AVKR,AUHO,OAHD,MAGO,IAAIsB,cAAc,CAACV,MAAf,GAAwB,CAA5B,EAA+B;AVI5C,AUHQQ,QAAAA,OAAO,CAACK,KAAR,gCAAsCH,cAAc,CAACV,MAArD;AVIR,AUHO,OAFM,MAEA,IAAIU,cAAJ,EAAoB;AVIjC,AUHQF,QAAAA,OAAO,CAACC,GAAR,CAAY,sDACH,KAAKhB,KAAL,CAAWqB,CAAX,EAAc1B,IADX,CAAZ;AVIR,AUFO;AVGP,AUFK;AVGL,AUFG,GAnBD;AVsBF,AUFC,CAvCM;AV0CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","/**\n * Secure random string generator with custom alphabet.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * @param {generator} random The random bytes generator.\n * @param {string} alphabet Symbols to be used in new random string.\n * @param {size} size The number of symbols in new random string.\n *\n * @return {string} Random string.\n *\n * @example\n * const format = require('nanoid/format')\n *\n * function random (size) {\n *   const result = []\n *   for (let i = 0; i < size; i++) {\n *     result.push(randomByte())\n *   }\n *   return result\n * }\n *\n * format(random, \"abcdef\", 5) //=> \"fbaef\"\n *\n * @name format\n * @function\n */\nmodule.exports = function (random, alphabet, size) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  var step = Math.ceil(1.6 * mask * size / alphabet.length)\n  size = +size\n\n  var id = ''\n  while (true) {\n    var bytes = random(step)\n    for (var i = 0; i < step; i++) {\n      var byte = bytes[i] & mask\n      if (alphabet[byte]) {\n        id += alphabet[byte]\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\n/**\n * @callback generator\n * @param {number} bytes The number of bytes to generate.\n * @return {number[]} Random bytes.\n */\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\r\n\r\n/** Probably move this off to a module later */\r\nexport const primaryColorMap = {\r\n  yellow: '#b58900',\r\n  orange: '#cb4b16',\r\n  red: '#dc322f',\r\n  magenta: '#d33682',\r\n  violet: '6c71c4',\r\n  blue: '#268bd2',\r\n  cyan: '#2aa198',\r\n  green: '#859900',\r\n};\r\n\r\nexport const htmlSnippets = {\r\n  taskTemplate: `\r\n      <li class='task'>\r\n      </div>`,\r\n\r\n\r\n  taskTitle: `\r\n      <div class='task-title col-8'>\r\n        Task Title\r\n      </div>`,\r\n\r\n  taskDeleteButton: `<button class='btn col-1 material-icons' id='task-delete-button'>delete</button>`,\r\n  taskEditButton: `<button class='btn col-1 material-icons' id='task-edit-button'>edit</button>`,\r\n  taskUpdateButton: `<button class='btn task-update-button col-1>Update Task</button>`,\r\n  taskAddButton: `<div class='task-add-button col-1>Add Task</div>`,\r\n  taskEditSearchBar: `<input class=\"col-10 d-inline\" type=\"text\" minlength=\"1\" id=\"edit-task-input\" placeholder=\"New description goes here\">`,\r\n};","'use strict';\r\n\r\nconst shortid = require('shortid');\r\nconst style = require('./html-templates.js')\r\n\r\n/**\r\n * Constructs task objects.\r\n * @constructor\r\n * @param {String} title - The short version of the task. Max 50 characters.\r\n * @param {String} description - The long version of what the task is.\r\n * @param {*} dueDate - The date the task is due for completion by.\r\n * - Should be implemented with moment.js.\r\n * - Should be DD/MM/YYYY format.\r\n * @param {String} list - The name of the list which this task belongs to.\r\n * Defaults to inbox.\r\n */\r\nexport const Task = function (title) {\r\n  this.title = title;\r\n  this.uuid = shortid.generate();\r\n};\r\n\r\n\r\n\r\n/**\r\n* Creates a To-Do list.\r\n* @constructor\r\n* @param {String} name - The name of the list.\r\n* @param {String} color - The color to be selected, e.g. 'yellow'.\r\n* Defaults to a random color from primaryColorList.\r\n*/\r\nexport const List = function (name, color) {\r\n  this.name = name;\r\n  this.uuid = shortid.generate();\r\n  this.tasks = [];\r\n\r\n  // If list color wasn't selected, pick one from themese at random\r\n  if (!color) {\r\n    let colorNames = Object.keys(style.primaryColorMap);\r\n    randomColorIndex = Math.floor(colorNames.length * Math.random());\r\n    this.color =\r\n      style.primaryColorList(randomColorIndex);\r\n  } else {\r\n    this.color = color;\r\n  }\r\n\r\n  this.addTask = function() {\r\n    this.tasks.add(new Task());\r\n  };\r\n\r\n  this.deleteTask = function(uuid) {\r\n    let taskIndex = this.findTaskByUuid(uuid);\r\n\r\n    // If a hit was found, then delete that item from the array \r\n    if (taskIndex) {\r\n      console.log(`Deleting item from list...`)\r\n      let deletedContent = this.tasks.splice(index, 1);\r\n\r\n      // Sanity checks\r\n      if (deletedContent) {\r\n        console.error(`No items found in list: ${this.name} with ` +\r\n            `UUID: ${uuid}`);\r\n      } else if (deletedContent.length > 1) {\r\n        console.error(`Accidentally deleted ${deletedContent.length} items.`)\r\n      } else if (deletedContent) {\r\n        console.log(`Task was deleted from this list. ` +\r\n        `UUID: ${this.tasks[i].uuid}`);\r\n      }\r\n    }\r\n  }\r\n}","'use strict';\r\n\r\nconst style = require('./html-templates.js')\r\n\r\nexport const appendTask = function(list, task) {\r\n  list.append(`<li class='task-item' id='${task.uuid}'></li>`);\r\n  $(`#${task.uuid}`).append(`<div class=\"task-title col-10 d-inline\">${task.title}</div>`); // put text into task element\r\n  //$(`${task.uuid}`).append(`<div id=\"task-button-container\"></div>`);\r\n\r\n  $(`#${task.uuid}`).append(style.htmlSnippets.taskEditButton); // add edit button\r\n  \r\n  $(`#${task.uuid}`).append(style.htmlSnippets.taskDeleteButton); // add delete button\r\n  \r\n  $(`#${task.uuid} #task-edit-button`).on('click', function() { // Add edit button click listener\r\n    let removedStuff = $(`#${task.uuid} .task-title`).replaceWith(style.htmlSnippets.taskEditSearchBar);\r\n      $(`#${task.uuid} #edit-task-input`).on('keyup', function(e) {\r\n        console.log('keyup detected')\r\n        if (e.keyCode === 13) {\r\n          console.log('enter detected.')\r\n          task.title = $(`#${task.uuid} #edit-task-input`).val();\r\n          $(`#${task.uuid} #edit-task-input`).replaceWith(`<div class=\"task-title col-10 d-inline\">${task.title}</div>`);\r\n        }\r\n      });\r\n  });\r\n\r\n  $(`#${task.uuid} #task-delete-button`).on('click', function() { // Add delete button click listener\r\n    $(`#${task.uuid}`).remove();\r\n  });\r\n}\r\n\r\nexport const editTask = function(selector, task) {\r\n  $(`#${task.uuid}`).html(style.htmlSnippets.taskEditSearchBar);\r\n}","'use strict';\r\n\r\nconst structure = require('./utils/constructors.js');\r\nconst style = require('./utils/html-templates.js');\r\nconst utils = require('./utils/utils.js');\r\n\r\n$('document').ready(function () {\r\n  let testTask = new structure.Task(\r\n    'This task is a sample To-Do item.', // title\r\n    'This is a long description of a test task.', // description\r\n  );\r\n\r\n  utils.appendTask($('.task-list'), testTask);\r\n  initializePage();\r\n  \r\n\r\n})\r\n\r\n\r\n/**\r\n * Wires up all buttons to actions, initializes all listeners that should be \r\n * active at page load.\r\n */\r\nfunction initializePage() {\r\n\r\n  // Add listener for submittal of changed task title.\r\n  $('#add-task-input').on('keyup', function (e) {\r\n    if (e.keyCode === 13) {\r\n      let title = $('#add-task-input').val();\r\n      let createdTask = new structure.Task(title);\r\n\r\n      $('#add-task-input').val(''); // clear input field after enter\r\n      utils.appendTask($('.task-list'), createdTask);\r\n    } \r\n  });\r\n\r\n  $('#add-task-button').on('click', function () {\r\n    let title = $('#add-task-input').val();\r\n    let createdTask = new structure.Task(title);\r\n\r\n    $('#add-task-input').val(''); // clear input field after enter\r\n    utils.appendTask($('.task-list'), createdTask);\r\n  });\r\n\r\n  listenForMenuButton();\r\n}\r\n\r\n/**\r\n * Listens for the menu button click and modifies the page accordingly.\r\n */\r\nfunction listenForMenuButton() {\r\n  $('#menu-button').click(function() {\r\n    $('aside').toggleClass('pushed');\r\n    $('.wrapper').toggleClass('pushed');\r\n  });\r\n\r\n  $('#aside-menu-button').click(function() {\r\n    $('aside').toggleClass('pushed');\r\n    $('.wrapper').toggleClass('pushed');\r\n  });\r\n}\r\n\r\n"]}