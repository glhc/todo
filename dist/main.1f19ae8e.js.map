{"version":3,"sources":["node_modules/uuid/lib/rng-browser.js","node_modules/uuid/lib/bytesToUuid.js","node_modules/uuid/v1.js","utils/structure-lib.js","utils/style-snippets.js","main.js"],"names":["uuidGen","require","Task","title","description","dueDate","tags","isCompleted","list","uuid","moment","comments","update","descriptions","Comment","message","List","name","color","tasks","colorNames","Object","keys","primaryColorMap","randomColorIndex","Math","floor","length","random","primaryColorList","addTask","add","arguments","deleteTask","index","console","log","i","slice","exports","yellow","orange","red","magenta","violet","blue","cyan","green","htmlSnippets","task","structure","style","taskArea","$","append","testButton","eq","click","fadeToggle"],"mappings":"AKAA,AJAA,ADAA,AEAA,ACAA,ACAA;AHCA,ADAA,AEAA,AECA;ACAA,AJAA,ADAA,AEAA,ACAA,IEAMkD,AFAAlD,OAAO,EEAE,CFACC,EEAEA,KFAK,CAAC,CEAC,CAAC,OFAH,CAAvB,kBEAyB,CAAzB;AJCA,ADAA,AEAA,ACCA,ACDAsC,OAAO,CAAChB,eAAR,GAA0B;ACA1B,AJCA,ADAA,AEAA,AEAEiB,EAAAA,ECDIW,IDCE,CCDG,CDCD,ECDIlD,OAAO,ADAK,CCAJ,2BAAD,CAArB;AJEA,ADAA,AEAA,AEAEwC,EAAAA,MAAM,EAAE,SAFgB;ACE1B,AJCA,ADAA,AEAA,AEAEC,EAAAA,ECDEU,CDCC,EAAE,KCDK,GAAGC,CAAC,ADFU,CCET,SAAD,CAAhB;AAEAD,AJAA,ADAA,AEAA,AEAET,EAAAA,MCAM,CAACW,ADAA,EAAE,ICAX,CAAgBH,IDJU,CCIL,CAACH,YAAN,CAAmBC,IAAnC;AAEA,AJDA,ADAA,AEAA,AEAEL,EAAAA,ECCEW,IDDI,EAAE,ICCI,GAAGF,CAAC,ADNQ,CCMP,QAAD,CAAD,CAAYG,EAAZ,CAAe,CAAf,CAAjB;AACAD,AJDA,ADAA,AEAA,AEAEV,EAAAA,IAAI,EAAE,ECCE,CAACY,KAAX,CAAiB,ADPS,YCOE;AAC1BF,AJDF,ADAA,AEAA,AEAET,ECCAS,ADDAT,IAAI,EAAE,ICCI,CAACY,IDRa,MCQxB;AACD,AJDD,ADAA,AEAA,AEAEX,CCDF,CDCEA,KAAK,EAAE;AHCT,ADAA,AEAA,AET0B,CAA1B;AHUA,ADAA,AEAA,AECAR,OAAO,CAACS,YAAR,GAAuB;AHAvB,ADAA,AEAA,AECAC,EAAAA,IAAI;AHAJ,ADAA,AEAA,AEDuB,CAAvB;AHEA,ADAA,AEAA,ACDA,IAAM/C,IAAI,GAAG,SAAPA,IAAO,CACPC,KADO,EACAC,WADA,EACaC,OADb,EACsBC,IADtB,EAEL;AFAR,ADAA,AEAA,ACAQ,MADiCC,WACjC,uEAD+C,KAC/C;AFCR,ADAA,AEAA,ACDQ,MADsDC,IACtD,uEAD6D,OAC7D;AFER,ADAA,AEAA,ACDE,OAAKL,KAAL,GAAaA,KAAb;AFEF,ADA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","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","'use strict';\n\nconst uuidGen = require('uuid/v1');\n\n/**\n * Constructs task objects.\n * @constructor\n * @param {String} title - The short version of the task. Max 50 characters.\n * @param {String} description - The long version of what the task is.\n * @param {*} dueDate - The date the task is due for completion by.\n * - Should be implemented with moment.js.\n * - Should be DD/MM/YYYY format.\n * @param {String} list - The name of the list which this task belongs to.\n * Defaults to inbox.\n */\nconst Task = function (\n      title, description, dueDate, tags, isCompleted = false, list = 'inbox'\n      ) {\n  this.title = title;\n  this.uuid = uuidGen();\n  this.description = description;\n  this.list = list;\n  this.tags = tags;\n  this.dueDate = moment(dueDate);\n  this.isCompleted = isCompleted;\n  this.comments = [];\n  this.update = function(\n      title, descriptions, dueDate, tags, isCompleted = false, list\n      ) {\n  };\n  this.Comment = function (message) {\n    this.message = message;\n  }\n};\n\n\n/**\n* Creates a To-Do list.\n* @constructor\n* @param {String} name - The name of the list.\n* @param {String} color - The color to be selected, e.g. 'yellow'.\n* Defaults to a random color from primaryColorList.\n*/\nconst List = function (name, color) {\n  this.name = name;\n  this.uuid = uuidGen();\n  this.tasks = [];\n\n  // If there isn't a color, pick one at random\n  if (!color) {\n    let colorNames = Object.keys(primaryColorMap);\n    randomColorIndex = Math.floor(colorNames.length * Math.random());\n    this.color =\n      primaryColorList(randomColorIndex);\n  } else {\n    this.color = color;\n  }\n  this.addTask = function() {\n    this.tasks.add(new Task(arguments));\n  };\n  this.deleteTask = function(uuid) {\n    let index = null;\n    console.log(`Trying to find log with UUID: ${uuid}`)\n    // Find what the index of the task is with the UUID.\n    for (let i = 0; i < this.tasks.length; i++) {\n      if (this.tasks[i] === uuid) {\n        index = i;\n      }\n    };\n\n    // If a hit was found, then delete that item from the array \n    if (index) {\n      console.log(`Task was deleted from this list. ` +\n          `UUID: ${this.tasks[i].uuid}`);\n\n      this.tasks = this.tasks.slice(0, index) +\n          this.tasks.slice(index, tasks.length);\n    };\n  };\n};\n","'use strict';\n\n/** Probably move this off to a module later */\nexports.primaryColorMap = {\n  yellow: '#b58900',\n  orange: '#cb4b16',\n  red: '#dc322f',\n  magenta: '#d33682',\n  violet: '6c71c4',\n  blue: '#268bd2',\n  cyan: '#2aa198',\n  green: '#859900',\n};\n\nexports.htmlSnippets = {\ntask: `<div class='task'>Test</div>`\n  \n};","'use strict';\n\nconst structure = require('./utils/structure-lib.js');\nconst style = require('./utils/style-snippets.js');\n\nlet taskArea = $('section')\n\ntaskArea.append(style.htmlSnippets.task);\n\nlet testButton = $('button').eq(0);\ntestButton.click(function() {\n  testButton.fadeToggle();\n});\n\n"]}